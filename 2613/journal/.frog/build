((3) 0 () 7 ((p+ #"/home/student/fcshome/CLONE/cs2613-clone/journal/_src/posts/2019-09-19-lab5-post.md" . unix) (p+ #"/home/student/fcshome/CLONE/cs2613-clone/journal/_src/posts/2019-09-17-lab-4-post.md" . unix) (p+ #"/home/student/fcshome/CLONE/cs2613-clone/journal/_src/posts/2019-09-12-lab3-post.md" . unix) (p+ #"/home/student/fcshome/CLONE/cs2613-clone/journal/_src/posts/2019-09-10-lab-2.md" . unix) (p+ #"/home/student/fcshome/CLONE/cs2613-clone/journal/_src/posts/2019-09-05-lab-1-post.md" . unix) (p+ #"/home/student/fcshome/CLONE/cs2613-clone/journal/_src/posts/2019-09-24-lab6.md" . unix) (p+ #"/home/student/fcshome/CLONE/cs2613-clone/journal/_src/posts/2019-09-26-lab7.md" . unix)) () (h ! (equal) ((p+ #"/home/student/fcshome/CLONE/cs2613-clone/journal/_src/posts/2019-09-17-lab-4-post.md" . unix) f post (u . "L04 Post") (? . 1) 1568767917 (p+ #"/home/student/fcshome/CLONE/cs2613-clone/journal/2019/09/l04-post.html" . unix) (u . "/2019/09/l04-post.html") (u . "2019-09-17T12:35:41") (? . 2) (? . 0) (c (u . "lab")) (u . "\n<p>Scribble was introduced today and the most interesting part about it was the fact that functions could be defined and used in a blog post. Another concept introduced was modules which are similar to Java&rsquo;s <a href=\"https://www.leepoint.net/language/10basics/import.html\">import</a> or Javascript&rsquo;s <a href=\"https://developer.mozilla.org/en-US/docs/web/javascript/reference/statements/export\">export</a>. One of the things I practiced was debugging and recursion, and in doing so I found an interesting error. In the <strong>else</strong> part of this code block:</p>\n\n<pre><code>(define (fact n)\n      (cond\n        [(zero? n) 1]\n        [else                     ])) </code></pre>\n\n<p>I put:</p>\n\n<pre><code>(fact (* n (n-1)))</code></pre>\n\n<p>which caused DrRacket to give me this error <em>n&ndash;1: unbound identifier in: n&ndash;1</em> and I very quickly realized that how I&rsquo;m used to programming in other languages actually became a hindrance here. Racket was looking for a id named <em>n&ndash;1</em> and I thought it would know that I wanted to pass the variable <em>n</em> subtracted by 1. Finally, there were no explicit readings but rather suggested readings. We were required to push all of our work for this lab and of course this post!</p>") #t (u . "\n<p>Scribble was introduced today and the most interesting part about it was the fact that functions could be defined and used in a blog post. Another concept introduced was modules which are similar to Java&rsquo;s <a href=\"https://www.leepoint.net/language/10basics/import.html\">import</a> or Javascript&rsquo;s <a href=\"https://developer.mozilla.org/en-US/docs/web/javascript/reference/statements/export\">export</a>. One of the things I practiced was debugging and recursion, and in doing so I found an interesting error. In the <strong>else</strong> part of this code block:</p>\n\n<pre><code>(define (fact n)\n      (cond\n        [(zero? n) 1]\n        [else                     ])) </code></pre>\n\n<p>I put:</p>\n\n<pre><code>(fact (* n (n-1)))</code></pre>\n\n<p>which caused DrRacket to give me this error <em>n&ndash;1: unbound identifier in: n&ndash;1</em> and I very quickly realized that how I&rsquo;m used to programming in other languages actually became a hindrance here. Racket was looking for a id named <em>n&ndash;1</em> and I thought it would know that I wanted to pass the variable <em>n</em> subtracted by 1. Finally, there were no explicit readings but rather suggested readings. We were required to push all of our work for this lab and of course this post!</p>\n<!-- more-->")) ((p+ #"/home/student/fcshome/CLONE/cs2613-clone/journal/_src/posts/2019-09-19-lab5-post.md" . unix) f post (u . "Lab5 Post") (? . 0) 1569335641 (p+ #"/home/student/fcshome/CLONE/cs2613-clone/journal/2019/09/lab5-post.html" . unix) (u . "/2019/09/lab5-post.html") (u . "2019-09-19T12:15:44") (? . 1) (? . 5) (c (u . "labs")) (u . "\n<p>Lab 5 introduced <a href=\"https://docs.racket-lang.org/guide/Lists__Iteration__and_Recursion.html#%28part._tail-recursion%29\">tail recursion</a> which took my head for a spin in an effort to understand what is truly going on. Recursion of course is familiar but tail recursion was certainly a new concept. Helper methods and stack tracing was also introduced but already known to me. I practiced recursive thinking (in a new way) and loops. It was very interesting that the <em>odds-evens2</em> function (which uses tail recursion) was significantly faster than the other functions. Dr. David Bremner mentioned that one of the reasons for this is because this is a case where the makers of the language found a way to optimize the language due to their knowledge of how stack frames work in regards to recursion. According to Racket then,</p>\n\n<blockquote>\n <p>&ldquo;tail recursion refers to the special case where the return value of the recursive branch is nothing more than the value of the next recursive call (also known as a tail call).&rdquo;</p></blockquote>\n\n<p>There is definitely a use for the technique but I still find it a little confusing and difficult and most likely will never use it. I also found out about using the <em>range</em> function to create numbers instead of build-list which will be very useful for me. The range function looks like this: <code>(range 1000000)</code> Most likely I will use this in my assignment 1 submission. The last task given dealt with Numerical Integration examples (using calculus). It&rsquo;s been a long time since I used calculus but thankfully a deep background in mathematics was not required, all that was required was to fix some failing tests. Also, aside from some suggested background reading we were required to stack trace, complete the <em>odds-evens2</em> function, compare function speeds and commit our work.</p>\n\n<h3 id=\"reference\">Reference:</h3>\n\n<p><a href=\"https://beautifulracket.com/explainer/recursion.html\">Racket</a></p>") #t (u . "\n<p>Lab 5 introduced <a href=\"https://docs.racket-lang.org/guide/Lists__Iteration__and_Recursion.html#%28part._tail-recursion%29\">tail recursion</a> which took my head for a spin in an effort to understand what is truly going on. Recursion of course is familiar but tail recursion was certainly a new concept. Helper methods and stack tracing was also introduced but already known to me. I practiced recursive thinking (in a new way) and loops. It was very interesting that the <em>odds-evens2</em> function (which uses tail recursion) was significantly faster than the other functions. Dr. David Bremner mentioned that one of the reasons for this is because this is a case where the makers of the language found a way to optimize the language due to their knowledge of how stack frames work in regards to recursion. According to Racket then,</p>\n\n<blockquote>\n <p>&ldquo;tail recursion refers to the special case where the return value of the recursive branch is nothing more than the value of the next recursive call (also known as a tail call).&rdquo;</p></blockquote>\n\n<p>There is definitely a use for the technique but I still find it a little confusing and difficult and most likely will never use it. I also found out about using the <em>range</em> function to create numbers instead of build-list which will be very useful for me. The range function looks like this: <code>(range 1000000)</code> Most likely I will use this in my assignment 1 submission. The last task given dealt with Numerical Integration examples (using calculus). It&rsquo;s been a long time since I used calculus but thankfully a deep background in mathematics was not required, all that was required was to fix some failing tests. Also, aside from some suggested background reading we were required to stack trace, complete the <em>odds-evens2</em> function, compare function speeds and commit our work.</p>\n\n<h3 id=\"reference\">Reference:</h3>\n\n<p><a href=\"https://beautifulracket.com/explainer/recursion.html\">Racket</a></p>\n<!-- more-->")) ((p+ #"/home/student/fcshome/CLONE/cs2613-clone/journal/_src/posts/2019-09-10-lab-2.md" . unix) f post (u . "Lab 2") (? . 3) 1568764908 (p+ #"/home/student/fcshome/CLONE/cs2613-clone/journal/2019/09/lab-2.html" . unix) (u . "/2019/09/lab-2.html") (u . "2019-09-11T07:39:29") (? . 4) (? . 2) (c (u . "Lab")) (u . "\n<p>I didn&rsquo;t really learn any new concepts from a high level perspective but I did learn racket syntax. Familiar concepts included conditionals and definitions.  I practiced writing small programs in the racket language and using the DrRacket IDE. An interesting part about racket is that there are (brackets) everywhere! For this lab, I was required to read the racket quick tutorial and a peer&rsquo;s git log.</p>") #t (u . "\n<p>I didn&rsquo;t really learn any new concepts from a high level perspective but I did learn racket syntax. Familiar concepts included conditionals and definitions.  I practiced writing small programs in the racket language and using the DrRacket IDE. An interesting part about racket is that there are (brackets) everywhere! For this lab, I was required to read the racket quick tutorial and a peer&rsquo;s git log.</p>\n<!-- more-->")) ((p+ #"/home/student/fcshome/CLONE/cs2613-clone/journal/_src/posts/2019-09-12-lab3-post.md" . unix) f post (u . "Lab3 Post") (? . 2) 1568767994 (p+ #"/home/student/fcshome/CLONE/cs2613-clone/journal/2019/09/lab3-post.html" . unix) (u . "/2019/09/lab3-post.html") (u . "2019-09-12T19:48:26") (? . 3) (? . 1) (c (u . "labs")) (u . "\n<p>In this lab, there were familiar concepts such as recursion, and unit tests, but there was also an unfamiliar concept introduced to me called <em>Git Bisect</em>. In regards to unit tests, I learned about this at a job placement and actually wrote test cases in Jest for a business product that was being developed using something called <a href=\"https://storybook.js.org/\">Storybook</a>, so doing unit tests in Racket was a bit of a refresher. I also practiced function definitions and working through recursion. I did find that making my own mapper function was difficult but that was mainly because I still didnt know enough about the language and had to work through documentation to get up to speed.  Tasks given in this lab included reading <a href=\"https://docs.racket-lang.org/guide/Lists__Iteration__and_Recursion.html#%28part._.List_.Iteration_from_.Scratch%29\">Racket Recursion</a> of the Racket Guide which explains how to recursively traverse a list, reading &ldquo;The Beautiful Racket unit test explainer&rdquo;, and creating complete test code coverage for the <strong>file.rkt</strong> code.</p>") #t (u . "\n<p>In this lab, there were familiar concepts such as recursion, and unit tests, but there was also an unfamiliar concept introduced to me called <em>Git Bisect</em>. In regards to unit tests, I learned about this at a job placement and actually wrote test cases in Jest for a business product that was being developed using something called <a href=\"https://storybook.js.org/\">Storybook</a>, so doing unit tests in Racket was a bit of a refresher. I also practiced function definitions and working through recursion. I did find that making my own mapper function was difficult but that was mainly because I still didnt know enough about the language and had to work through documentation to get up to speed.  Tasks given in this lab included reading <a href=\"https://docs.racket-lang.org/guide/Lists__Iteration__and_Recursion.html#%28part._.List_.Iteration_from_.Scratch%29\">Racket Recursion</a> of the Racket Guide which explains how to recursively traverse a list, reading &ldquo;The Beautiful Racket unit test explainer&rdquo;, and creating complete test code coverage for the <strong>file.rkt</strong> code.</p>\n<!-- more-->")) ((p+ #"/home/student/fcshome/CLONE/cs2613-clone/journal/_src/posts/2019-09-05-lab-1-post.md" . unix) f post (u . "Lab 1 Post") (? . 4) 1568759182 (p+ #"/home/student/fcshome/CLONE/cs2613-clone/journal/2019/09/lab-1-post.html" . unix) (u . "/2019/09/lab-1-post.html") (u . "2019-09-05T19:07:26") #f (? . 3) (c (u . "Lab 1")) (u . "\n<p>Most of the concepts introduced in this lab are things that I already knew, such as using a terminal editor (nano specifically) and the use of git. What I learned from this lab, was how to use racket and frog to build a blog. I installed racket on my personal computer and learned how to add it to my $Path environment so that I can run the commands. It was difficult at first but knowing how to use nano and knowing my way around a terminal helped immensely in adding the previous step. Lastly, as for readings I was required to read the syllabus and the quick start guide for creating this blog.</p>\n\n<p><strong>References</strong></p>\n\n<p><a href=\"https://www.howtogeek.com/howto/42980/the-beginners-guide-to-nano-the-linux-command-line-text-editor/\">Nano</a></p>\n\n<p><a href=\"https://docs.racket-lang.org/frog/Quick_start.html?q=frog#%28part._.Starting_a_new_blog_project%29\">Frog</a></p>") #t (u . "\n<p>Most of the concepts introduced in this lab are things that I already knew, such as using a terminal editor (nano specifically) and the use of git. What I learned from this lab, was how to use racket and frog to build a blog. I installed racket on my personal computer and learned how to add it to my $Path environment so that I can run the commands. It was difficult at first but knowing how to use nano and knowing my way around a terminal helped immensely in adding the previous step. Lastly, as for readings I was required to read the syllabus and the quick start guide for creating this blog.</p>\n\n<p><strong>References</strong></p>\n\n<p><a href=\"https://www.howtogeek.com/howto/42980/the-beginners-guide-to-nano-the-linux-command-line-text-editor/\">Nano</a></p>\n\n<p><a href=\"https://docs.racket-lang.org/frog/Quick_start.html?q=frog#%28part._.Starting_a_new_blog_project%29\">Frog</a></p>\n<!-- more-->")) ((? . 5) f post (u . "Lab6") (? . 5) 1570119112 (p+ #"/home/student/fcshome/CLONE/cs2613-clone/journal/2019/09/lab6.html" . unix) (u . "/2019/09/lab6.html") (u . "2019-09-24T11:39:07") (? . 0) (? . 6) (c (u . "labs")) (u . "\n<p>Lab 6 was difficult for me as the concepts introduced to me were concepts that I have little knowledge about. The first was <a href=\"https://docs.racket-lang.org/guide/hash-tables.html?q=racket-lang.org\">Hash Tables</a> which I&rsquo;ve never actually implemented before. I was surprised to find out that they are immutable and unable to be me modified. When a function is called to change the order, add, or remove elements in a hash table such as <a href=\"https://docs.racket-lang.org/reference/hashtables.html#%28elem._%28caveat._mutable-keys%29%29\">hash-set</a> then it actually creates a new hash rather than modify the hash table passed in as an argument. Next, we learned about plotting using the <em>calculus.rkt</em> file. This was later discussed as a class as to how <strong>visualization</strong> is applied to software development. The conclusion drawn was that it&rsquo;s used in <a href=\"https://www.targetprocess.com/blog/data-driven-development/\">Data Driven Development</a> where the ouput depends on the input (and only on the input). And aside from this, it&rsquo;s also useful for debugging. Lastly, I practiced how to parse <a href=\"http://www.json.org/\">JSON</a> data (something I had never done before) and it was interesting to learn! It combined some concepts from hash tables that we had practiced earlier in the lab as well. I&rsquo;m sure that these concepts will surface again in the midterm and final exam, which means that I will need to practice outside of lab times to ensure that the concepts are engrained in my mind, since as mentioned before that it&rsquo;s an area where I have a knowledge gap. Overall, it was a learning experience and I know it will be useful in a work environment.</p>") #t (u . "\n<p>Lab 6 was difficult for me as the concepts introduced to me were concepts that I have little knowledge about. The first was <a href=\"https://docs.racket-lang.org/guide/hash-tables.html?q=racket-lang.org\">Hash Tables</a> which I&rsquo;ve never actually implemented before. I was surprised to find out that they are immutable and unable to be me modified. When a function is called to change the order, add, or remove elements in a hash table such as <a href=\"https://docs.racket-lang.org/reference/hashtables.html#%28elem._%28caveat._mutable-keys%29%29\">hash-set</a> then it actually creates a new hash rather than modify the hash table passed in as an argument. Next, we learned about plotting using the <em>calculus.rkt</em> file. This was later discussed as a class as to how <strong>visualization</strong> is applied to software development. The conclusion drawn was that it&rsquo;s used in <a href=\"https://www.targetprocess.com/blog/data-driven-development/\">Data Driven Development</a> where the ouput depends on the input (and only on the input). And aside from this, it&rsquo;s also useful for debugging. Lastly, I practiced how to parse <a href=\"http://www.json.org/\">JSON</a> data (something I had never done before) and it was interesting to learn! It combined some concepts from hash tables that we had practiced earlier in the lab as well. I&rsquo;m sure that these concepts will surface again in the midterm and final exam, which means that I will need to practice outside of lab times to ensure that the concepts are engrained in my mind, since as mentioned before that it&rsquo;s an area where I have a knowledge gap. Overall, it was a learning experience and I know it will be useful in a work environment.</p>\n<!-- more-->")) ((? . 6) f post (u . "Lab7") (? . 6) 1570119112 (p+ #"/home/student/fcshome/CLONE/cs2613-clone/journal/2019/09/lab7.html" . unix) (u . "/2019/09/lab7.html") (u . "2019-09-26T09:14:24") (? . 5) #f (c (u . "lab")) (u . "\n<p>Lab 7 consisted of learning macros, short-circuiting, pattern matching, and combinators. I&rsquo;ve heard of macros before especially in the context of cybersecurity, such as malware being spread through Microsoft Word&rsquo;s macro features. One <a href=\"https://insights.sei.cmu.edu/cert/2016/06/who-needs-to-exploit-vulnerabilities-when-you-have-macros.html\">blog</a> even suggests disabling macros almost completely for companies unless they have already been vetted and approved. In the lab, we learned to use macros as a way to redefine <strong>and</strong> as well as <strong>or</strong>. Part of the implementation, required understanding <a href=\"https://www.interviewcake.com/concept/java/short-circuit-evaluation\">short-circuiting</a>, so that our <em>die</em> function wouldn&rsquo;t cause our tests to fail. My <strong>or</strong> implementation looked like this:</p>\n\n<pre><code>(define-syntax-rule (Or a b)\n  (if b #t a)\n</code></pre>\n\n<p>Pattern matching is described as being &ldquo;a fancy cond&rdquo;, where a pattern is specified to match against data being sent. For this part, I had to just follow the professor as there are cracks in my knowledge concerning racket. After this part was done, I spent some time reading about how <em>eval</em> operates on a list at runtime, which makes it flexible but also <a href=\"https://en.wikipedia.org/wiki/Code_injection#Dynamic_evaluation_vulnerabilities\">dangerous</a>.  eval is an example of reflection, because it operates on a regular list at runtime. This makes it very flexible but also somewhat dangerous. &gt; An eval() injection vulnerability occurs when an attacker can control all or part of an input string that is fed into an eval() function call. The rest of the lab wasn&rsquo;t too bad, but there wasn&rsquo;t anything else that was interesting enough to grab my attention. As for tasks, there were just suggested readings and of course the lab activities.</p>") #t (u . "\n<p>Lab 7 consisted of learning macros, short-circuiting, pattern matching, and combinators. I&rsquo;ve heard of macros before especially in the context of cybersecurity, such as malware being spread through Microsoft Word&rsquo;s macro features. One <a href=\"https://insights.sei.cmu.edu/cert/2016/06/who-needs-to-exploit-vulnerabilities-when-you-have-macros.html\">blog</a> even suggests disabling macros almost completely for companies unless they have already been vetted and approved. In the lab, we learned to use macros as a way to redefine <strong>and</strong> as well as <strong>or</strong>. Part of the implementation, required understanding <a href=\"https://www.interviewcake.com/concept/java/short-circuit-evaluation\">short-circuiting</a>, so that our <em>die</em> function wouldn&rsquo;t cause our tests to fail. My <strong>or</strong> implementation looked like this:</p>\n\n<pre><code>(define-syntax-rule (Or a b)\n  (if b #t a)\n</code></pre>\n\n<p>Pattern matching is described as being &ldquo;a fancy cond&rdquo;, where a pattern is specified to match against data being sent. For this part, I had to just follow the professor as there are cracks in my knowledge concerning racket. After this part was done, I spent some time reading about how <em>eval</em> operates on a list at runtime, which makes it flexible but also <a href=\"https://en.wikipedia.org/wiki/Code_injection#Dynamic_evaluation_vulnerabilities\">dangerous</a>.  eval is an example of reflection, because it operates on a regular list at runtime. This makes it very flexible but also somewhat dangerous. &gt; An eval() injection vulnerability occurs when an attacker can control all or part of an input string that is fed into an eval() function call. The rest of the lab wasn&rsquo;t too bad, but there wasn&rsquo;t anything else that was interesting enough to grab my attention. As for tasks, there were just suggested readings and of course the lab activities.</p>\n<!-- more-->"))))