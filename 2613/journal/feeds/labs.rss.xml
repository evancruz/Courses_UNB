<?xml version="1.0" encoding="utf-8"?> 
<rss version="2.0">
 <channel>
  <title>My Blog: Posts tagged 'labs'</title>
  <description>My Blog: Posts tagged 'labs'</description>
  <link>http://www.example.com/tags/labs.html</link>
  <lastBuildDate>Tue, 24 Sep 2019 14:39:07 UT</lastBuildDate>
  <pubDate>Tue, 24 Sep 2019 14:39:07 UT</pubDate>
  <ttl>1800</ttl>
  <item>
   <title>Lab6</title>
   <link>http://www.example.com/2019/09/lab6.html?utm_source=labs&amp;utm_medium=RSS</link>
   <guid isPermaLink="false">urn:http-www-example-com:-2019-09-lab6-html</guid>
   <pubDate>Tue, 24 Sep 2019 14:39:07 UT</pubDate>
   <author>The Unknown Author</author>
   <description>
&lt;p&gt;Lab 6 was difficult for me as the concepts introduced to me were concepts that I have little knowledge about. The first was &lt;a href="https://docs.racket-lang.org/guide/hash-tables.html?q=racket-lang.org"&gt;Hash Tables&lt;/a&gt; which I&amp;rsquo;ve never actually implemented before. I was surprised to find out that they are immutable and unable to be me modified. When a function is called to change the order, add, or remove elements in a hash table such as &lt;a href="https://docs.racket-lang.org/reference/hashtables.html#%28elem._%28caveat._mutable-keys%29%29"&gt;hash-set&lt;/a&gt; then it actually creates a new hash rather than modify the hash table passed in as an argument. Next, we learned about plotting using the &lt;em&gt;calculus.rkt&lt;/em&gt; file. This was later discussed as a class as to how &lt;strong&gt;visualization&lt;/strong&gt; is applied to software development. The conclusion drawn was that it&amp;rsquo;s used in &lt;a href="https://www.targetprocess.com/blog/data-driven-development/"&gt;Data Driven Development&lt;/a&gt; where the ouput depends on the input (and only on the input). And aside from this, it&amp;rsquo;s also useful for debugging. Lastly, I practiced how to parse &lt;a href="http://www.json.org/"&gt;JSON&lt;/a&gt; data (something I had never done before) and it was interesting to learn! It combined some concepts from hash tables that we had practiced earlier in the lab as well. I&amp;rsquo;m sure that these concepts will surface again in the midterm and final exam, which means that I will need to practice outside of lab times to ensure that the concepts are engrained in my mind, since as mentioned before that it&amp;rsquo;s an area where I have a knowledge gap. Overall, it was a learning experience and I know it will be useful in a work environment.&lt;/p&gt;&lt;a href="http://www.example.com/2019/09/lab6.html?utm_source=labs&amp;amp;utm_medium=RSS"&gt;&lt;em&gt;More&amp;hellip;&lt;/em&gt;&lt;/a&gt;</description></item>
  <item>
   <title>Lab5 Post</title>
   <link>http://www.example.com/2019/09/lab5-post.html?utm_source=labs&amp;utm_medium=RSS</link>
   <guid isPermaLink="false">urn:http-www-example-com:-2019-09-lab5-post-html</guid>
   <pubDate>Thu, 19 Sep 2019 15:15:44 UT</pubDate>
   <author>The Unknown Author</author>
   <description>
&lt;p&gt;Lab 5 introduced &lt;a href="https://docs.racket-lang.org/guide/Lists__Iteration__and_Recursion.html#%28part._tail-recursion%29"&gt;tail recursion&lt;/a&gt; which took my head for a spin in an effort to understand what is truly going on. Recursion of course is familiar but tail recursion was certainly a new concept. Helper methods and stack tracing was also introduced but already known to me. I practiced recursive thinking (in a new way) and loops. It was very interesting that the &lt;em&gt;odds-evens2&lt;/em&gt; function (which uses tail recursion) was significantly faster than the other functions. Dr. David Bremner mentioned that one of the reasons for this is because this is a case where the makers of the language found a way to optimize the language due to their knowledge of how stack frames work in regards to recursion. According to Racket then,&lt;/p&gt;

&lt;blockquote&gt;
 &lt;p&gt;&amp;ldquo;tail recursion refers to the special case where the return value of the recursive branch is nothing more than the value of the next recursive call (also known as a tail call).&amp;rdquo;&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;There is definitely a use for the technique but I still find it a little confusing and difficult and most likely will never use it. I also found out about using the &lt;em&gt;range&lt;/em&gt; function to create numbers instead of build-list which will be very useful for me. The range function looks like this: &lt;code&gt;(range 1000000)&lt;/code&gt; Most likely I will use this in my assignment 1 submission. The last task given dealt with Numerical Integration examples (using calculus). It&amp;rsquo;s been a long time since I used calculus but thankfully a deep background in mathematics was not required, all that was required was to fix some failing tests. Also, aside from some suggested background reading we were required to stack trace, complete the &lt;em&gt;odds-evens2&lt;/em&gt; function, compare function speeds and commit our work.&lt;/p&gt;

&lt;h3 id="reference"&gt;Reference:&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://beautifulracket.com/explainer/recursion.html"&gt;Racket&lt;/a&gt;&lt;/p&gt;&lt;a href="http://www.example.com/2019/09/lab5-post.html?utm_source=labs&amp;amp;utm_medium=RSS"&gt;&lt;em&gt;More&amp;hellip;&lt;/em&gt;&lt;/a&gt;</description></item>
  <item>
   <title>Lab3 Post</title>
   <link>http://www.example.com/2019/09/lab3-post.html?utm_source=labs&amp;utm_medium=RSS</link>
   <guid isPermaLink="false">urn:http-www-example-com:-2019-09-lab3-post-html</guid>
   <pubDate>Thu, 12 Sep 2019 22:48:26 UT</pubDate>
   <author>The Unknown Author</author>
   <description>
&lt;p&gt;In this lab, there were familiar concepts such as recursion, and unit tests, but there was also an unfamiliar concept introduced to me called &lt;em&gt;Git Bisect&lt;/em&gt;. In regards to unit tests, I learned about this at a job placement and actually wrote test cases in Jest for a business product that was being developed using something called &lt;a href="https://storybook.js.org/"&gt;Storybook&lt;/a&gt;, so doing unit tests in Racket was a bit of a refresher. I also practiced function definitions and working through recursion. I did find that making my own mapper function was difficult but that was mainly because I still didnt know enough about the language and had to work through documentation to get up to speed.  Tasks given in this lab included reading &lt;a href="https://docs.racket-lang.org/guide/Lists__Iteration__and_Recursion.html#%28part._.List_.Iteration_from_.Scratch%29"&gt;Racket Recursion&lt;/a&gt; of the Racket Guide which explains how to recursively traverse a list, reading &amp;ldquo;The Beautiful Racket unit test explainer&amp;rdquo;, and creating complete test code coverage for the &lt;strong&gt;file.rkt&lt;/strong&gt; code.&lt;/p&gt;&lt;a href="http://www.example.com/2019/09/lab3-post.html?utm_source=labs&amp;amp;utm_medium=RSS"&gt;&lt;em&gt;More&amp;hellip;&lt;/em&gt;&lt;/a&gt;</description></item></channel></rss>